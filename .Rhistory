x <- matrix(1:4, 2, 2)
x1 <- makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function (y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data,...)
x$setinverse(i)
i
}
x1 <- makeCacheMatrix(x)
cacheSolve(x1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function (y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- inverse(data,...)
x$setinverse(i)
i
}
cacheSolve(x1)
x <- makeCacheMatrix
x
x <- matrix(c(1,3,6,9), 2, 2)
x
x1 <- makeCacheMatrix(x)
x1
cacheSolve(x1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function (y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data,...)
x$setinverse(i)
i
}
x <- matrix(1:9, 3, 3)
x
x1 <- makeCacheMatrix(x)
cacheSolve(x1)
x <- matrix(1:16, 4, 4)
x
x1 <- makeCacheMatrix(x)
cacheSolve(x1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function (y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data,...)
x$setinverse(i)
i
}
x <- matrix(1:4, 2, 2)
x1 <- makeCacheMatrix(x)
cacheSolve(x10)
cacheSolve(x1)
## These functions compute the inverse of a square matrix
## This functioncreates a special "matrix" object that can
## cache its inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function (y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set = set,
get = get,
setinv = setinv,
getinv = getinv)
}
## This fuction computes the inverse of the special "matrix"
## returned by makeCacheMatrix above
cacheSolve <- function(x, ...) {
i <- x$getinv()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data,...)
x$setinv(i)
i
}
x <- matrix(1:4, 2, 2)
x1 <- makeCacheMatrix(x)
cacheSolve(x1)
